#!/usr/bin/env python3
"""
Test script for prompt configuration functionality
"""

import sys
import os
from pathlib import Path

# Add core directory to path
sys.path.append(str(Path(__file__).parent.parent.parent / "core"))

from config.prompt_config import PromptConfig

def test_case_type_detection():
    """Test case type detection from filenames"""
    print("üß™ Testing case type detection...")
    
    test_cases = [
        ("01_01_breast_feeding_problems.json", "01"),
        ("01_02_CHC_9_months.json", "01"),
        ("02_01_blood_in_stool.json", "02"),
        ("02_02_breaking_bad_news.json", "02"),
        ("random_filename.json", "unknown"),
        ("03_01_some_case.json", "unknown")
    ]
    
    for filename, expected in test_cases:
        result = PromptConfig.get_case_type_from_filename(filename)
        status = "‚úÖ PASS" if result == expected else "‚ùå FAIL"
        print(f"  {status}: '{filename}' -> '{result}' (expected: '{expected}')")
    
    print()

def test_display_names():
    """Test display name generation"""
    print("üß™ Testing display names...")
    
    test_cases = [
        ("01", "üë©‚Äç‚öïÔ∏è ‡∏°‡∏≤‡∏£‡∏î‡∏≤"),
        ("02", "üë©‚Äç‚öïÔ∏è ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏à‡∏≥‡∏•‡∏≠‡∏á"),
        ("unknown", "üë©‚Äç‚öïÔ∏è ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")
    ]
    
    for case_type, expected in test_cases:
        result = PromptConfig.get_display_name(case_type)
        status = "‚úÖ PASS" if result == expected else "‚ùå FAIL"
        print(f"  {status}: '{case_type}' -> '{result}' (expected: '{expected}')")
    
    print()

def test_prompt_generation():
    """Test prompt generation with sample data"""
    print("üß™ Testing prompt generation...")
    
    # Mock case data for testing
    sample_case_data_01 = {
        "simulation_view": {
            "simulator_profile": {
                "name": "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡πÅ‡∏™‡∏á",
                "age": "25",
                "occupation": "‡πÅ‡∏°‡πà‡∏ö‡πâ‡∏≤‡∏ô",
                "emotional_state": "‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏î"
            },
            "simulation_instructions": {
                "scenario": "‡∏•‡∏π‡∏Å‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡∏î‡∏π‡∏î‡∏ô‡∏°",
                "sample_dialogue": []
            }
        },
        "examiner_view": {
            "patient_background": {
                "name": "‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏ç‡∏¥‡∏á‡∏ô‡πâ‡∏≥‡πÉ‡∏™",
                "age": {"value": 2, "unit": "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"}
            }
        }
    }
    
    sample_case_data_02 = {
        "simulation_view": {
            "simulator_profile": {
                "name": "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢",
                "age": {"value": 45, "unit": "‡∏õ‡∏µ"},
                "occupation": "‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£",
                "emotional_state": "‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
            },
            "simulation_instructions": {
                "scenario": "‡∏°‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÉ‡∏ô‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞",
                "behavior": "‡∏û‡∏π‡∏î‡∏ä‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏ï‡πà‡∏ñ‡∏≤‡∏°",
                "sample_dialogue": []
            }
        },
        "examiner_view": {
            "patient_background": {
                "sex": "‡∏ä‡∏≤‡∏¢"
            },
            "patient_illness_history": "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏°‡∏≤ 1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
            "symptoms_timeline": "‡πÄ‡∏ä‡πâ‡∏≤‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡πâ‡∏ß‡∏° ‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏î‡πÜ"
        }
    }
    
    # Test 01 prompt generation
    try:
        prompt_01 = PromptConfig.extract_data_and_build_prompt_01(
            sample_case_data_01, "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", "- ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö", ""
        )
        print("  ‚úÖ PASS: Case type 01 prompt generation successful")
        
        # Check if key elements are present
        if "‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô" in prompt_01 and "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡πÅ‡∏™‡∏á" in prompt_01:
            print("  ‚úÖ PASS: Case type 01 prompt contains expected elements")
        else:
            print("  ‚ùå FAIL: Case type 01 prompt missing expected elements")
            
    except Exception as e:
        print(f"  ‚ùå FAIL: Case type 01 prompt generation failed: {e}")
    
    # Test 02 prompt generation
    try:
        prompt_02 = PromptConfig.extract_data_and_build_prompt_02(
            sample_case_data_02, "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", "- ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö", ""
        )
        print("  ‚úÖ PASS: Case type 02 prompt generation successful")
        
        # Check if key elements are present
        if "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå" in prompt_02 and "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢" in prompt_02:
            print("  ‚úÖ PASS: Case type 02 prompt contains expected elements")
        else:
            print("  ‚ùå FAIL: Case type 02 prompt missing expected elements")
            
    except Exception as e:
        print(f"  ‚ùå FAIL: Case type 02 prompt generation failed: {e}")
    
    print()

def test_summary_prompts():
    """Test summary prompt generation"""
    print("üß™ Testing summary prompts...")
    
    try:
        summary_01 = PromptConfig.get_summary_prompt_01()
        if "‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á" in summary_01:
            print("  ‚úÖ PASS: Case type 01 summary prompt contains expected content")
        else:
            print("  ‚ùå FAIL: Case type 01 summary prompt missing expected content")
            
        summary_02 = PromptConfig.get_summary_prompt_02()
        if "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏à‡∏≥‡∏•‡∏≠‡∏á" in summary_02:
            print("  ‚úÖ PASS: Case type 02 summary prompt contains expected content")
        else:
            print("  ‚ùå FAIL: Case type 02 summary prompt missing expected content")
            
    except Exception as e:
        print(f"  ‚ùå FAIL: Summary prompt generation failed: {e}")
    
    print()

def main():
    print("üöÄ Starting Prompt Configuration Tests\n")
    
    test_case_type_detection()
    test_display_names()
    test_prompt_generation()
    test_summary_prompts()
    
    print("‚ú® Test completed!")

if __name__ == "__main__":
    main()
