#!/usr/bin/env python3
"""
Test different improved analysis prompts to fix the false positive issue
with fallback question detection.
"""

import json
import os
from openai import OpenAI

def load_api_key():
    """Load OpenAI API key from environment or file"""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        try:
            with open(".env", "r") as f:
                for line in f:
                    if line.startswith("OPENAI_API_KEY="):
                        api_key = line.split("=", 1)[1].strip()
                        break
        except FileNotFoundError:
            print("‚ùå No API key found. Set OPENAI_API_KEY environment variable or create .env file")
            return None
    return api_key

def analyze_with_original_prompt(client, student_input, fallback_questions):
    """Original analysis prompt (the problematic one)"""
    questions_list = "\n".join([f"{i+1}. {q}" for i, q in enumerate(fallback_questions)])

    analysis_prompt = [
        {"role": "system", "content": (
            "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå "
            "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÑ‡∏î‡πâ‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° "
            "‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏ô‡∏±‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô:\n"
            "- '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£' = ‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å\n"
            "- '‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á' = ‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏°\n"
            "- '‡∏´‡∏±‡∏ß‡∏ô‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏π‡πÅ‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏á' = ‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏´‡∏±‡∏ß‡∏ô‡∏°‡πÅ‡∏ï‡∏Å\n"
            "‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON array ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô [1, 3] ‡∏´‡∏£‡∏∑‡∏≠ [] ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ"
        )},
        {"role": "user", "content": f"""
            ‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏û‡∏π‡∏î: "{student_input}"

            ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:
            {questions_list}

            ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÑ‡∏î‡πâ‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß:"""}]

    try:
        response = client.chat.completions.create(
            messages=analysis_prompt,
            model="gpt-4.1-mini",
            temperature=0.1,
            max_completion_tokens=50
        )
        return json.loads(response.choices[0].message.content.strip())
    except Exception as e:
        return f"Error: {e}"

def analyze_with_improved_prompt_v1(client, student_input, fallback_questions):
    """Improved prompt - more restrictive, requiring direct topic match"""
    questions_list = "\n".join([f"{i+1}. {q}" for i, q in enumerate(fallback_questions)])

    analysis_prompt = [
        {"role": "system", "content": (
            "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå "
            "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÑ‡∏î‡πâ‡∏ñ‡∏≤‡∏°**‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô**‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà "
            "**‡∏´‡πâ‡∏≤‡∏°**‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏ô‡∏±‡∏¢\n\n"
            "‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà:\n"
            "- ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á\n"
            "- ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà, ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô, ‡πÄ‡∏Ñ‡∏¢‡∏û‡∏ö‡∏´‡∏°‡∏≠) ‚â† ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á\n"
            "- ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ ‚â† ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£\n"
            "- ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏£‡∏Ñ ‚â† ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥\n\n"
            "‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON array ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô [1, 3] ‡∏´‡∏£‡∏∑‡∏≠ [] ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ"
        )},
        {"role": "user", "content": f"""
            ‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏û‡∏π‡∏î: "{student_input}"

            ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:
            {questions_list}

            ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ñ‡∏≤‡∏°**‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô**‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á:"""}]

    try:
        response = client.chat.completions.create(
            messages=analysis_prompt,
            model="gpt-4.1-mini",
            temperature=0.1,
            max_completion_tokens=50
        )
        return json.loads(response.choices[0].message.content.strip())
    except Exception as e:
        return f"Error: {e}"

def analyze_with_improved_prompt_v2(client, student_input, fallback_questions):
    """Improved prompt v2 - even more restrictive with keyword matching"""
    questions_list = "\n".join([f"{i+1}. {q}" for i, q in enumerate(fallback_questions)])

    analysis_prompt = [
        {"role": "system", "content": (
            "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ñ‡∏≤‡∏°**‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô**‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà\n\n"
            "‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà (‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î):\n"
            "1. ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô\n"
            "2. ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô\n"
            "3. ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô\n\n"
            "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà **‡πÑ‡∏°‡πà** ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô:\n"
            "- '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà' ‚â† '‡∏•‡∏π‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤‡∏Å' (‡∏ñ‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ ‚â† ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á)\n"
            "- '‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏´‡∏°' ‚â† '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏á' (‡∏ñ‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ ‚â† ‡∏ñ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤)\n"
            "- '‡πÄ‡∏Ñ‡∏¢‡∏û‡∏ö‡∏´‡∏°‡∏≠' ‚â† '‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡πÑ‡∏´‡∏°' (‡∏ñ‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ‚â† ‡∏ñ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤)\n\n"
            "‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON array ‡πÄ‡∏ä‡πà‡∏ô [1, 3] ‡∏´‡∏£‡∏∑‡∏≠ [] ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≠‡πÉ‡∏î"
        )},
        {"role": "user", "content": f"""
            ‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ñ‡∏≤‡∏°: "{student_input}"

            ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:
            {questions_list}

            ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô**‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô**:"""}]

    try:
        response = client.chat.completions.create(
            messages=analysis_prompt,
            model="gpt-4.1-mini",
            temperature=0.1,
            max_completion_tokens=50
        )
        return json.loads(response.choices[0].message.content.strip())
    except Exception as e:
        return f"Error: {e}"

def main():
    test_cases = [
        {
            "case_name": "Case 8 - Gastroenteritis (Problematic)",
            "student_inputs": [
                "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà‡∏Ñ‡∏£‡∏±‡∏ö",
                "‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö", 
                "‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ‡∏´‡∏≤‡∏´‡∏°‡∏≠‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö"
            ],
            "fallback_questions": ["‡∏•‡∏π‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡∏°‡∏±‡πä‡∏¢‡∏Ñ‡∏∞"]
        },
        {
            "case_name": "Legitimate matches (Should still work)",
            "student_inputs": [
                "‡∏•‡∏π‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡πÑ‡∏´‡∏°",
                "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö",
                "‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö",
                "‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡πÑ‡∏´‡∏°"
            ],
            "fallback_questions": ["‡∏•‡∏π‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡∏°‡∏±‡πä‡∏¢‡∏Ñ‡∏∞", "‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏Ñ‡∏∞", "‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏∞"]
        }
    ]

    api_key = load_api_key()
    if not api_key:
        return

    client = OpenAI(api_key=api_key)

    print("üîç TESTING IMPROVED ANALYSIS PROMPTS")
    print("=" * 80)

    for test_case in test_cases:
        print(f"\n## {test_case['case_name']}")
        print(f"Fallback Questions: {test_case['fallback_questions']}")
        print("-" * 60)

        for student_input in test_case['student_inputs']:
            print(f"\nüßë‚Äç‚öïÔ∏è Doctor: \"{student_input}\"")
            
            # Test all three approaches
            original = analyze_with_original_prompt(client, student_input, test_case['fallback_questions'])
            improved_v1 = analyze_with_improved_prompt_v1(client, student_input, test_case['fallback_questions'])
            improved_v2 = analyze_with_improved_prompt_v2(client, student_input, test_case['fallback_questions'])
            
            print(f"  üìä Original:     {original}")
            print(f"  üîß Improved V1:  {improved_v1}")
            print(f"  üîß Improved V2:  {improved_v2}")

    print("\n" + "=" * 80)
    print("üéØ GOAL: Find a prompt that eliminates false positives while keeping legitimate matches")

if __name__ == "__main__":
    main()
