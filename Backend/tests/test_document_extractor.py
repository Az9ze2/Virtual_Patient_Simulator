#!/usr/bin/env python3
"""
Test script for Medical Document Extractor
Tests both HuggingFace models and regex extraction methods
"""

import sys
import os
import json
from pathlib import Path

# Add parent directory to path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.document_extractor import MedicalDocumentExtractor, extract_from_content

def test_sample_thai_content():
    """Test extraction with sample Thai medical content"""
    
    sample_content = """
    ‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö Comprehensive OSCE (Clinical Skills)
    ‡πÉ‡∏ä‡πâ‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 10 ‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏° 2566
    
    ‡∏†‡∏≤‡∏Ñ‡∏ß‡∏¥‡∏ä‡∏≤ ‡∏Å‡∏∏‡∏°‡∏≤‡∏£‡πÄ‡∏ß‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡πÉ‡∏ä‡πâ‡∏™‡∏≠‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå ‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà 6
    ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏°‡πÅ‡∏°‡πà
    ‡πÉ‡∏ô‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏´‡∏±‡∏ß‡∏ô‡∏°‡πÅ‡∏ï‡∏Å (cracked nipple)
    
    ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≠‡∏ö 10 ‡∏ô‡∏≤‡∏ó‡∏µ
    ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ï‡πá‡∏° 100 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ú‡πà‡∏≤‡∏ô 54 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    
    ‡πÇ‡∏à‡∏ó‡∏¢‡πå
    ‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏û‡∏≤ ‡∏î.‡∏ä.‡∏¢‡∏¥‡∏ô‡∏î‡∏µ ‡∏õ‡∏£‡∏µ‡∏î‡∏≤ ‡∏≠‡∏≤‡∏¢‡∏∏ 5 ‡∏ß‡∏±‡∏ô ‡∏°‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤
    ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏°‡πÅ‡∏°‡πà‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏ô‡∏°‡∏Ç‡πâ‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤‡πÅ‡∏ï‡∏Å
    
    ‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ 25 ‡∏õ‡∏µ ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏°‡πà‡∏ö‡πâ‡∏≤‡∏ô ‡∏™‡∏≤‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ 30 ‡∏õ‡∏µ ‡∏ó‡∏≥‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏Ñ‡∏£‡∏π
    """
    
    print("üß™ Testing Medical Document Extractor")
    print("=" * 60)
    
    # Test with HuggingFace model
    print("\n1. Testing with HuggingFace model...")
    try:
        extractor = MedicalDocumentExtractor(model_name="microsoft/DialoGPT-medium", device="cpu")
        result = extractor._extract_structured_data(sample_content)
        
        print("‚úÖ HuggingFace extraction successful!")
        print("Extracted patient name:", result.get('patient_demographics', {}).get('patient_name', 'N/A'))
        print("Extracted age:", result.get('patient_demographics', {}).get('age', 'N/A'))
        print("Chief complaint:", result.get('presenting_complaint', {}).get('chief_complaint', 'N/A'))
        
    except Exception as e:
        print(f"‚ùå HuggingFace extraction failed: {str(e)}")
        print("Note: This is expected if HuggingFace transformers is not installed")
    
    # Test regex extraction (always works)
    print("\n2. Testing with Regex extraction...")
    try:
        extractor = MedicalDocumentExtractor()
        result = extractor._extract_with_regex(sample_content)
        
        print("‚úÖ Regex extraction successful!")
        print("Extracted patient name:", result.get('patient_demographics', {}).get('patient_name', 'N/A'))
        print("Extracted age:", result.get('patient_demographics', {}).get('age', 'N/A'))
        print("Chief complaint:", result.get('presenting_complaint', {}).get('chief_complaint', 'N/A'))
        print("Case title:", result.get('case_metadata', {}).get('case_title', 'N/A'))
        
        # Show full result in JSON format
        print("\nüìÑ Full extraction result (JSON):")
        print(json.dumps(result, ensure_ascii=False, indent=2))
        
    except Exception as e:
        print(f"‚ùå Regex extraction failed: {str(e)}")
    
    print("\n" + "=" * 60)
    print("Test completed!")

def test_file_reading():
    """Test different file format reading capabilities"""
    
    print("\nüìÅ Testing file reading capabilities...")
    
    # Test with text file
    test_file = Path("test_sample.txt")
    if test_file.exists():
        try:
            extractor = MedicalDocumentExtractor()
            result = extractor.extract_from_file(str(test_file))
            print("‚úÖ File reading test successful!")
            print("Patient name:", result.get('patient_demographics', {}).get('patient_name', 'N/A'))
        except Exception as e:
            print(f"‚ùå File reading test failed: {str(e)}")
    else:
        print("‚ÑπÔ∏è  No test file found, skipping file reading test")

def test_extraction_performance():
    """Test extraction performance and accuracy"""
    
    print("\n‚ö° Testing extraction performance...")
    
    # Multiple test cases
    test_cases = [
        {
            "name": "Pediatric Case",
            "content": "‡∏°‡∏≤‡∏£‡∏î‡∏≤‡∏û‡∏≤ ‡∏î.‡∏ä.‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏≠‡∏≤‡∏¢‡∏∏ 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏°‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï"
        },
        {
            "name": "Adult Case", 
            "content": "‡∏ô‡∏≤‡∏¢ ‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡∏≠‡∏≤‡∏¢‡∏∏ 45 ‡∏õ‡∏µ ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á"
        }
    ]
    
    extractor = MedicalDocumentExtractor()
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nTest Case {i}: {test_case['name']}")
        try:
            result = extractor._extract_with_regex(test_case['content'])
            patient_name = result.get('patient_demographics', {}).get('patient_name', 'Not found')
            age = result.get('patient_demographics', {}).get('age', 'Not found')
            
            print(f"  Patient: {patient_name}")
            print(f"  Age: {age}")
            print("  ‚úÖ Extraction successful")
            
        except Exception as e:
            print(f"  ‚ùå Failed: {str(e)}")

if __name__ == "__main__":
    print("üè• Medical Document Extractor Test Suite")
    print("========================================")
    
    # Run all tests
    test_sample_thai_content()
    test_file_reading()
    test_extraction_performance()
    
    print("\nüéâ All tests completed!")
    print("\nTo run with HuggingFace models, install dependencies:")
    print("pip install transformers torch")
